name: Legacy CI/CD Pipeline
# This workflow is kept for reference and runs on develop branch
# Main branch CI/CD now handled by ci.yml and release.yml workflows
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
    
    - name: Install dependencies
      run: |
        cd api
        npm ci
    
    - name: Run linter
      run: |
        cd api
        npm run lint
    
    - name: Run type checking
      run: |
        cd api
        npm run type-check
    
    - name: Build project
      run: |
        cd api
        npm run build
    
    - name: Run tests
      run: |
        cd api
        npm test
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret-key-32-characters-long
        ENCRYPTION_KEY: test-encryption-key-32-characters
        SUPABASE_URL: http://localhost:54321
        SUPABASE_ANON_KEY: test-anon-key
        SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        directory: api/coverage
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
    
    - name: Install dependencies
      run: |
        cd api
        npm ci
    
    - name: Run quality checks
      run: |
        cd api
        npm run lint
        npm run type-check
        npm run build
    
    - name: Check bundle size
      run: |
        cd api
        npm run build
        du -sh dist/
        # Fail if bundle is too large (adjust threshold as needed)
        [ $(du -s dist/ | cut -f1) -lt 10000 ] || (echo "Bundle size too large" && exit 1)

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
    
    - name: Install dependencies
      run: |
        cd api
        npm ci
    
    - name: Run security audit
      run: |
        cd api
        npm audit --audit-level=moderate
    
    - name: Check for secrets
      run: |
        # Simple check for common secret patterns
        if grep -r "password\|secret\|key" --include="*.ts" --include="*.js" api/src/ | grep -v "process.env" | grep -v "// " | grep -v "const.*=" | head -5; then
          echo "Potential secrets found in code"
          exit 1
        fi
        echo "No obvious secrets found"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
    
    - name: Install dependencies
      run: |
        cd api
        npm ci
    
    - name: Build project
      run: |
        cd api
        npm run build
    
    - name: Start server
      run: |
        cd api
        npm start &
        sleep 10
        echo "Server started"
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret-key-32-characters-long
        ENCRYPTION_KEY: test-encryption-key-32-characters
        SUPABASE_URL: http://localhost:54321
        SUPABASE_ANON_KEY: test-anon-key
        SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
    
    - name: Run integration tests
      run: |
        # Test health endpoint
        curl -f http://localhost:3000/health || exit 1
        
        # Test API endpoint
        curl -f http://localhost:3000/api/v1/test || exit 1
        
        # Test rate limiting (make multiple requests)
        for i in {1..5}; do
          curl -f http://localhost:3000/api/v1/test
        done
        
        echo "Integration tests passed"