name: Release (Production)
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  migrate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      # Set environment variables for non-interactive mode
      - name: Configure Supabase CLI for CI
        run: |
          # Disable interactive prompts and telemetry in CI
          echo "SUPABASE_CLI_DISABLE_TELEMETRY=true" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV
          echo "SUPABASE_CLI_DISABLE_KEYRING=true" >> $GITHUB_ENV
          
          # Verify required environment variables are set
          if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then
            echo "Error: SUPABASE_ACCESS_TOKEN environment variable is not set"
            echo "Please ensure this secret is configured in your GitHub repository settings"
            exit 1
          fi
          
          if [ -z "$SUPABASE_DB_PASSWORD" ]; then
            echo "Error: SUPABASE_DB_PASSWORD environment variable is not set"
            echo "Please ensure this secret is configured in your GitHub repository settings"
            exit 1
          fi
          
          echo "✅ Supabase CLI configured for CI environment"

      # Point the CLI at your cloud project
      - name: Validate and Extract Supabase Project ID
        run: |
          if [ -z "$SUPABASE_PROJECT_ID" ]; then
            echo "Error: SUPABASE_PROJECT_ID environment variable is not set"
            echo "Please ensure this secret is configured in your GitHub repository settings"
            exit 1
          fi
          
          # Extract project ID from URL format if needed
          if [[ "$SUPABASE_PROJECT_ID" =~ ^https?://([^.]+)\.supabase\.co ]]; then
            EXTRACTED_PROJECT_ID="${BASH_REMATCH[1]}"
            echo "Extracted project ID from URL: $EXTRACTED_PROJECT_ID"
            PROJECT_REF="$EXTRACTED_PROJECT_ID"
          else
            # Use the value as-is if it's not a URL
            echo "Using project ID as-is: $SUPABASE_PROJECT_ID"
            PROJECT_REF="$SUPABASE_PROJECT_ID"
          fi
          
          # Validate the final project ID format
          if [ ${#PROJECT_REF} -ne 20 ]; then
            echo "Error: SUPABASE_PROJECT_ID must be exactly 20 characters long, but is ${#PROJECT_REF}"
            echo "Current value: '$PROJECT_REF'"
            echo "Value length: ${#PROJECT_REF}"
            exit 1
          fi
          
          # Validate project ID format (alphanumeric lowercase)
          if [[ ! "$PROJECT_REF" =~ ^[a-z0-9]{20}$ ]]; then
            echo "Error: SUPABASE_PROJECT_ID must contain only lowercase letters and numbers"
            echo "Current value: '$PROJECT_REF'"
            exit 1
          fi
          
          # Set the validated project reference for subsequent steps
          echo "SUPABASE_PROJECT_REF=$PROJECT_REF" >> $GITHUB_ENV
          echo "✅ SUPABASE_PROJECT_ID validation passed: $PROJECT_REF"

      - name: Link to Supabase project
        run: |
          # Ensure we're in the correct directory and have proper permissions
          echo "Current directory: $(pwd)"
          echo "Supabase config exists: $(test -f supabase/config.toml && echo 'yes' || echo 'no')"
          
          # Link to the project with database password
          echo "Linking to Supabase project: $SUPABASE_PROJECT_REF"
          
          # Capture both output and exit code
          LINK_OUTPUT=$(supabase link --project-ref "$SUPABASE_PROJECT_REF" --password "$SUPABASE_DB_PASSWORD" 2>&1)
          LINK_EXIT_CODE=$?
          
          echo "Supabase link output:"
          echo "$LINK_OUTPUT"
          echo "Link exit code: $LINK_EXIT_CODE"
          
          # Check if the link command itself succeeded
          if [ $LINK_EXIT_CODE -eq 0 ]; then
            echo "✅ Project link successful"
            
            # Check if .supabase directory was created (better indicator than status)
            if [ -d ".supabase" ] && [ -f ".supabase/config.toml" ]; then
              echo "✅ Project configuration created"
              cat .supabase/config.toml
            else
              echo "⚠️  .supabase directory not found, but link succeeded"
            fi
            
            # Try status command but don't fail if it doesn't work
            echo "Attempting to get project status..."
            if supabase status 2>/dev/null; then
              echo "✅ Status command successful"
            else
              echo "⚠️  Status command failed, but this may be normal in CI"
              echo "The project link was successful based on the link command exit code"
            fi
            
          else
            echo "❌ Failed to link to Supabase project"
            echo "Link exit code: $LINK_EXIT_CODE"
            
            # Check if it's a keyring-only issue
            if echo "$LINK_OUTPUT" | grep -q "org.freedesktop.secrets"; then
              echo "This appears to be a keyring-only issue, but the link command itself failed"
            fi
            
            # Only exit with error if the link command actually failed
            exit 1
          fi

      # Ship every migration in supabase/migrations
      - name: Push database migrations
        run: |
          # Verify database connection before pushing
          echo "Verifying database connection and project status..."
          supabase status
          
          # Check if we have any migrations to push
          if [ -d "supabase/migrations" ] && [ "$(ls -A supabase/migrations)" ]; then
            echo "Found migrations in supabase/migrations:"
            ls -la supabase/migrations/
            
            # Push migrations with --yes flag to avoid prompts
            echo "Pushing database migrations..."
            DB_PUSH_OUTPUT=$(supabase db push --yes 2>&1) || DB_PUSH_EXIT_CODE=$?
            
            echo "Database push output:"
            echo "$DB_PUSH_OUTPUT"
            
            if [ "${DB_PUSH_EXIT_CODE:-0}" -ne 0 ]; then
              echo "❌ Database push failed with exit code: ${DB_PUSH_EXIT_CODE}"
              echo "Checking project status for debugging..."
              supabase status
              
              # Try to get more detailed error information
              echo "Attempting to diagnose database push failure..."
              
              # Check if it's a connection issue
              if echo "$DB_PUSH_OUTPUT" | grep -q "connection"; then
                echo "This appears to be a connection issue"
                echo "Checking if we can connect to the database..."
                supabase db ping || echo "Database ping failed"
              fi
              
              # Check if it's a migration issue
              if echo "$DB_PUSH_OUTPUT" | grep -q "migration"; then
                echo "This appears to be a migration-related issue"
                echo "Current migration status:"
                supabase migration list || echo "Could not list migrations"
              fi
              
              exit 1
            else
              echo "✅ Database migrations pushed successfully"
            fi
          else
            echo "No migrations found in supabase/migrations/ - skipping migration push"
          fi

      # (optional) regenerate TS types against the *remote* DB
      - name: Generate TypeScript types
        run: |
          echo "Generating TypeScript types from remote database..."
          
          # Ensure types directory exists
          mkdir -p types
          
          # Generate types with error handling
          TYPE_GEN_OUTPUT=$(supabase gen types typescript 2>&1) || TYPE_GEN_EXIT_CODE=$?
          
          if [ "${TYPE_GEN_EXIT_CODE:-0}" -ne 0 ]; then
            echo "❌ TypeScript type generation failed with exit code: ${TYPE_GEN_EXIT_CODE}"
            echo "Type generation output:"
            echo "$TYPE_GEN_OUTPUT"
            
            # Try to diagnose the issue
            echo "Attempting to diagnose type generation failure..."
            supabase status
            
            # Check if we can connect to the database
            supabase db ping || echo "Database ping failed"
            
            exit 1
          else
            # Save the generated types to file
            echo "$TYPE_GEN_OUTPUT" > types/supabase.ts
            echo "✅ TypeScript types generated successfully"
            echo "Generated types file size: $(wc -l < types/supabase.ts) lines"
            
            # Show a sample of the generated types for verification
            echo "Sample of generated types:"
            head -20 types/supabase.ts
          fi

      - name: Install root dependencies
        run: npm ci

      - name: Install API dependencies
        run: cd api && npm ci

      # Build and validate the project
      - name: Build project
        run: npm run build

      # Run quick validation tests
      - name: Run linter
        run: npm run lint

      # Commit generated types back to repo if they changed
      - name: Commit generated types
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add types/supabase.ts
          if ! git diff --staged --quiet; then
            git commit -m "chore: update generated Supabase types [skip ci]"
            git push
          else
            echo "No changes to Supabase types"
          fi
