name: Release (Production)
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  migrate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      # Set environment variables for non-interactive mode
      - name: Configure Supabase CLI for CI
        run: |
          # Disable interactive prompts and telemetry in CI
          echo "SUPABASE_CLI_DISABLE_TELEMETRY=true" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV

      # Point the CLI at your cloud project
      - name: Validate and Extract Supabase Project ID
        run: |
          if [ -z "$SUPABASE_PROJECT_ID" ]; then
            echo "Error: SUPABASE_PROJECT_ID environment variable is not set"
            exit 1
          fi
          
          # Extract project ID from URL format if needed
          if [[ "$SUPABASE_PROJECT_ID" =~ ^https?://([^.]+)\.supabase\.co ]]; then
            EXTRACTED_PROJECT_ID="${BASH_REMATCH[1]}"
            echo "Extracted project ID from URL: $EXTRACTED_PROJECT_ID"
            PROJECT_REF="$EXTRACTED_PROJECT_ID"
          else
            # Use the value as-is if it's not a URL
            echo "Using project ID as-is: $SUPABASE_PROJECT_ID"
            PROJECT_REF="$SUPABASE_PROJECT_ID"
          fi
          
          # Validate the final project ID format
          if [ ${#PROJECT_REF} -ne 20 ]; then
            echo "Error: SUPABASE_PROJECT_ID must be exactly 20 characters long, but is ${#PROJECT_REF}"
            echo "Current value: $PROJECT_REF"
            exit 1
          fi
          
          # Set the validated project reference for subsequent steps
          echo "SUPABASE_PROJECT_REF=$PROJECT_REF" >> $GITHUB_ENV
          echo "SUPABASE_PROJECT_ID validation passed"

      - name: Link to Supabase project
        run: |
          # Link to the project (warnings about keyring are expected in CI and can be ignored)
          supabase link --project-ref "$SUPABASE_PROJECT_REF" || {
            echo "Warning: Linking may have warnings about keyring service - this is normal in CI environments"
            # Check if link was actually successful despite keyring warnings
            if supabase status > /dev/null 2>&1; then
              echo "Project link successful"
            else
              echo "Failed to link to Supabase project"
              exit 1
            fi
          }

      # Ship every migration in supabase/migrations
      - name: Push database migrations
        run: |
          # Push migrations with non-interactive flag to avoid prompts
          supabase db push --non-interactive || {
            echo "Database push failed. Checking project status..."
            supabase status
            exit 1
          }

      # (optional) regenerate TS types against the *remote* DB
      - name: Generate TypeScript types
        run: supabase gen types typescript > types/supabase.ts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd api && npm ci

      # Build and validate the project
      - name: Build project
        run: npm run build

      # Run quick validation tests
      - name: Run linter
        run: npm run lint

      # Commit generated types back to repo if they changed
      - name: Commit generated types
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add types/supabase.ts
          if ! git diff --staged --quiet; then
            git commit -m "chore: update generated Supabase types [skip ci]"
            git push
          else
            echo "No changes to Supabase types"
          fi
